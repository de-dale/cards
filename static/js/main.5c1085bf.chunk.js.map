{"version":3,"sources":["app/hooks.ts","features/playground/loadDeckAPI.ts","features/playground/reducer.ts","components/playground/PlaygroundTools.tsx","components/cards/CardComponent.tsx","components/playground/Library.tsx","components/playground/Hand.tsx","components/playground/Graveyard.tsx","components/playground/Playground.tsx","App.tsx","app/store.ts","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","fetchDeck","deckUrl","fetch","then","response","ok","Error","statusText","json","data","map","name","content","importDeckFromUrlToLibrary","createAsyncThunk","thunkAPI","a","deck","dispatch","addDeckToLibrary","playgroundSlice","createSlice","initialState","library","hand","battlefield","graveyard","stack","exile","command","status","reducers","draw","playground","length","cardToDraw","remainingLibrary","push","action","concat","payload","addCardToLibrary","discardAll","discardByIndex","cardToDiscard","splice","putBelowLibrary","shuffleLibrary","array","i","j","Math","floor","random","shuffleArray","extraReducers","builder","addCase","pending","fulfilled","actions","selectPlayground","state","PlaygroundTools","useState","show","setShow","handleClose","Button","variant","className","onClick","Offcanvas","onHide","Header","closeButton","Title","Body","CreateCardForm","close","ImportDeckForm","validated","setValidated","end","setEnd","Form","noValidate","onSubmit","e","event","form","currentTarget","preventDefault","checkValidity","value","stopPropagation","handleSubmit","Label","Control","id","required","type","placeholder","Feedback","as","rows","style","height","CardComponent","card","hidden","revealable","Col","Card","width","Footer","size","overflow","Text","index","label","Library","ButtonToolbar","Row","xs","md","Hand","Graveyard","tarotDeck","Playground","fullDeck","getFullDeck","Container","fluid","FullDeck","DropdownButton","title","Dropdown","Item","InnerPlayground","placement","ListGroup","App","store","configureStore","reducer","playgroundReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5c1085bf.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { Card, Cards } from '../../shared/types'\n\nexport function fetchDeck(deckUrl: string): Promise<Cards> {\n  return fetch(deckUrl)\n    .then(response => {\n        if (!response.ok) {\n          throw new Error(response.statusText)\n        }\n        return response.json()\n      }\n    )\n    .then(data => [...data].map(({ name, content }) => ({ name, content }) as Card))\n}\n","import { createAsyncThunk, createSlice, Draft, PayloadAction } from '@reduxjs/toolkit'\nimport { RootState } from '../../app/store'\nimport { fetchDeck } from './loadDeckAPI'\nimport { Card, Cards } from '../../shared/types'\n\nexport interface PlaygroundState {\n  library: Cards;\n  hand: Cards;\n  battlefield: Cards;\n  graveyard: Cards;\n  stack: Cards;\n  exile: Cards;\n  command: Cards;\n  status: 'idle' | 'loading' | 'failed';\n}\n\nconst initialState: PlaygroundState = {\n  library: [] as Cards,\n  hand: [] as Cards,\n  battlefield: [] as Cards,\n  graveyard: [] as Cards,\n  stack: [] as Cards,\n  exile: [] as Cards,\n  command: [] as Cards,\n  status: 'idle',\n}\n\nexport const importDeckFromUrlToLibrary = createAsyncThunk(\n  'playground/loadLibrary',\n  async (deckUrl: string, thunkAPI) => {\n    const deck : Cards = await fetchDeck(deckUrl)\n    thunkAPI.dispatch(addDeckToLibrary(deck))\n  }\n)\n\nconst shuffleArray = (array: Array<any>) => {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]]\n  }\n}\n\nexport const playgroundSlice = createSlice({\n  name: 'playground',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    draw: (playground: Draft<PlaygroundState>) => {\n      if (playground.library.length === 0) {\n        return\n      }\n      const [cardToDraw, ...remainingLibrary] = playground.library\n      playground.hand.push(cardToDraw)\n      playground.library = remainingLibrary\n    },\n    addDeckToLibrary: (playground: Draft<PlaygroundState>, action: PayloadAction<Cards>) => {\n      playground.library = playground.library.concat(action.payload)\n    },\n    addCardToLibrary: (playground: Draft<PlaygroundState>, action: PayloadAction<Card>) => {\n      playground.library.push(action.payload)\n    },\n    discardAll: (playground: Draft<PlaygroundState>) => {\n      playground.graveyard = playground.graveyard.concat(playground.hand)\n      playground.hand = []\n    },\n    discardByIndex: (playground: Draft<PlaygroundState>, action: PayloadAction<number>) => {\n      const cardToDiscard: Cards = playground.hand.splice(action.payload, 1)\n      playground.graveyard = playground.graveyard.concat(cardToDiscard)\n    },\n    putBelowLibrary: (playground: Draft<PlaygroundState>) => {\n      playground.library = playground.library.concat(playground.graveyard)\n      playground.graveyard = []\n    },\n    shuffleLibrary: (playground: Draft<PlaygroundState>) => {\n      shuffleArray(playground.library)\n    }\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(importDeckFromUrlToLibrary.pending, (playground) => {\n        playground.status = 'loading'\n      })\n      .addCase(importDeckFromUrlToLibrary.fulfilled, (playground, action) => {\n        playground.status = 'idle'\n      })\n  },\n})\n\nexport const getFullDeck = (playground: PlaygroundState) => playground.library\n    .concat(playground.hand)\n    .concat(playground.battlefield)\n    .concat(playground.graveyard)\n    .concat(playground.stack)\n    .concat(playground.exile)\n    .concat(playground.command)\n\nexport const {\n  addCardToLibrary,\n  addDeckToLibrary,\n  discardAll,\n  discardByIndex,\n  draw,\n  putBelowLibrary,\n  shuffleLibrary\n} = playgroundSlice.actions\n\nexport const selectPlayground = (state: RootState) => state.playground\n\nexport default playgroundSlice.reducer\n","import React, { FormEvent, useState } from 'react'\nimport { Button, Form, Offcanvas } from 'react-bootstrap'\nimport { useAppDispatch } from '../../app/hooks'\nimport { addCardToLibrary, importDeckFromUrlToLibrary } from '../../features/playground/reducer'\n\nexport function PlaygroundTools() {\n  const [show, setShow] = useState(false)\n\n  const handleClose = () => setShow(false)\n  const handleShow = () => setShow(true)\n\n  return (\n    <>\n      <Button variant=\"primary\" className=\"me-2\" onClick={handleShow}>\n        Outils\n      </Button>\n\n      <Offcanvas show={show} onHide={handleClose}>\n        <Offcanvas.Header closeButton>\n          <Offcanvas.Title>Outils</Offcanvas.Title>\n        </Offcanvas.Header>\n        <Offcanvas.Body>\n          <CreateCardForm close={() => handleClose()}/>\n          <ImportDeckForm close={() => handleClose()}/>\n        </Offcanvas.Body>\n      </Offcanvas>\n    </>\n  )\n}\n\ntype CardFormProps = {\n  close: Function\n}\n\nfunction CreateCardForm({ close }: CardFormProps) {\n  const [validated, setValidated] = useState(false)\n  const [end, setEnd] = useState(false)\n  const dispatch = useAppDispatch()\n\n  const handleSubmit = (event: FormEvent<HTMLFormElement>) => {\n    const form = event.currentTarget\n    event.preventDefault()\n    if (!form.checkValidity()) {\n      event.stopPropagation()\n    } else {\n      dispatch(addCardToLibrary({\n        name: form['cardName'].value,\n        content: form['cardContent'].value,\n      }))\n      end && close()\n    }\n    setEnd(false)\n    setValidated(true)\n  }\n\n  return (\n    <Form noValidate validated={validated} onSubmit={(e) => handleSubmit(e)} className=\"mt-3\">\n      <Form.Label>Créer une carte</Form.Label>\n      <Form.Control\n        id=\"cardName\"\n        required\n        type=\"text\"\n        placeholder=\"Nom de la carte\"/>\n      <Form.Control.Feedback type=\"invalid\">Une carte doit avoir un nom</Form.Control.Feedback>\n      <Form.Control as=\"textarea\" rows={3} className=\"mt-1\"\n                    id=\"cardContent\"\n                    required\n                    style={{ height: '100px' }}\n                    placeholder=\"Effets de la carte\"/>\n      <Form.Control.Feedback type=\"invalid\">Une carte doit avoir des effets</Form.Control.Feedback>\n      <Button type=\"submit\" className=\"mt-3 me-2\">Créer</Button>\n      <Button type=\"submit\" className=\"mt-3\" onClick={() => setEnd(true)}>Créer et fermer</Button>\n    </Form>\n  )\n}\n\ntype ImportDeckFormProps = {\n  close: Function\n}\n\nfunction ImportDeckForm({ close }: ImportDeckFormProps) {\n  const [validated, setValidated] = useState(false)\n  const [end, setEnd] = useState(false)\n  const dispatch = useAppDispatch()\n\n  const handleSubmit = (event: FormEvent<HTMLFormElement>) => {\n    const form = event.currentTarget\n    event.preventDefault()\n    if (!form.checkValidity()) {\n      event.stopPropagation()\n    } else {\n      const deckUrl = form['deckUrl'].value\n      dispatch(importDeckFromUrlToLibrary(deckUrl))\n      end && close()\n    }\n    setEnd(false)\n    setValidated(true)\n  }\n\n  return (\n    <Form noValidate validated={validated} onSubmit={(e) => handleSubmit(e)} className=\"mt-3\">\n      <Form.Label>Importer un deck existant</Form.Label>\n      <Form.Control\n        id=\"deckUrl\"\n        required\n        type=\"text\"\n        placeholder=\"URL vers le deck à charger\"/>\n      <Form.Control.Feedback type=\"invalid\">Une carte doit avoir un nom</Form.Control.Feedback>\n      <Button type=\"submit\" className=\"mt-3 me-2\">Importer</Button>\n      <Button type=\"submit\" className=\"mt-3\" onClick={() => setEnd(true)}>Importer et fermer</Button>\n    </Form>\n  )\n}","import React, { useState } from 'react'\nimport { Button, Card, Col } from 'react-bootstrap'\nimport { Card as CardModel } from '../../shared/types'\n\ntype CardAction = {\n  label: string,\n  action: Function,\n}\n\ntype CardProps = {\n  card: CardModel,\n  actions?: Array<CardAction>,\n  hidden?: boolean,\n  revealable?: boolean\n}\n\nexport function CardComponent({ card, actions = [], hidden = false, revealable = false }: CardProps) {\n  const [show, setShow] = useState(!hidden)\n  return (\n    <>\n      <Col>\n        {!show && <Card style={{ width: '18rem', height: '12rem' }}>\n          <Card.Header as=\"h5\"> *** </Card.Header>\n          <Card.Body> *** </Card.Body>\n          <Card.Footer>\n            {revealable && <Button size=\"sm\" variant=\"secondary\"\n                                   onClick={() => setShow(!show)}\n                                   aria-label=\"Révéler\">\n              Révéler\n            </Button>}\n          </Card.Footer>\n        </Card>}\n        {show && <Card style={{ width: '18rem', height: '12rem' }}>\n          <Card.Header as=\"h5\">{card.name}</Card.Header>\n          <Card.Body style={{ overflow: 'auto' }}>\n            <Card.Text>{card.content}</Card.Text>\n          </Card.Body>\n          {(0 < actions.length || revealable) && <Card.Footer>\n            {actions.map((action, index) =>\n              <Button size=\"sm\" key={index}\n                      onClick={() => action.action()}\n                      aria-label={action.label}>\n                {action.label}\n              </Button>\n            )}\n            {revealable && <Button size=\"sm\" variant=\"secondary\"\n                                   onClick={() => setShow(!show)}\n                                   aria-label=\"Masquer\">\n              Masquer\n            </Button>}\n          </Card.Footer>}\n        </Card>}\n      </Col>\n    </>)\n}","import { Cards } from '../../shared/types'\nimport { useAppDispatch } from '../../app/hooks'\nimport { Button, ButtonToolbar, Row } from 'react-bootstrap'\nimport { draw, shuffleLibrary } from '../../features/playground/reducer'\nimport { CardComponent } from '../cards/CardComponent'\nimport React from 'react'\n\ntype LibraryProps = {\n  library: Cards,\n}\n\nexport function Library({ library }: LibraryProps) {\n  const dispatch = useAppDispatch()\n  return (\n    <>\n      <h2>Pioche : {library.length}</h2>\n      <ButtonToolbar>\n        <Button size=\"sm\" className=\"me-2\"\n                onClick={() => dispatch(draw())}\n                aria-label=\"Pioche\">\n          Pioche\n        </Button>\n        <Button size=\"sm\" variant=\"primary\"\n                onClick={() => dispatch(shuffleLibrary())}\n                aria-label=\"Mélanger\">\n          Mélanger\n        </Button>\n      </ButtonToolbar>\n      <Row xs={1} md={1} className=\"g-4\">\n        {library.map((card, index) =>\n          <CardComponent key={index}\n                         card={card}\n                         hidden\n                         revealable/>\n        )}\n      </Row>\n    </>)\n}","import { Cards } from '../../shared/types'\nimport { useAppDispatch } from '../../app/hooks'\nimport { Button, ButtonToolbar, Row } from 'react-bootstrap'\nimport { discardAll, discardByIndex } from '../../features/playground/reducer'\nimport { CardComponent } from '../cards/CardComponent'\nimport React from 'react'\n\ntype HandProps = {\n  hand: Cards,\n}\n\nexport function Hand({ hand }: HandProps) {\n  const dispatch = useAppDispatch()\n  return (\n    <>\n      <h2>La Main : {hand.length}</h2>\n      <ButtonToolbar>\n        <Button size=\"sm\" variant=\"primary\"\n                onClick={() => dispatch(discardAll())}\n                aria-label=\"Défausser la main\">\n          Défausser la main\n        </Button>\n      </ButtonToolbar>\n      <Row xs={1} md={3} className=\"g-4\">\n        {hand.map((card, index) =>\n          <CardComponent key={index} card={card} actions={[\n            {\n              label: 'Défausser',\n              action: () => dispatch(discardByIndex(index))\n            }\n          ]}/>\n        )}\n      </Row>\n    </>)\n}","import { Cards } from '../../shared/types'\nimport { useAppDispatch } from '../../app/hooks'\nimport { Button, ButtonToolbar, Row } from 'react-bootstrap'\nimport { putBelowLibrary } from '../../features/playground/reducer'\nimport { CardComponent } from '../cards/CardComponent'\nimport React from 'react'\n\ntype GraveyardProps = {\n  graveyard: Cards,\n}\n\nexport function Graveyard({ graveyard }: GraveyardProps) {\n  const dispatch = useAppDispatch()\n  return (\n    <>\n      <h2>La Défausse : {graveyard.length}</h2>\n      <ButtonToolbar>\n        <Button size=\"sm\"\n                onClick={() => dispatch(putBelowLibrary())}\n                aria-label=\"Remettre sous la pioche\">\n          Remettre sous la pioche\n        </Button>\n      </ButtonToolbar>\n      <Row xs={1} md={1} className=\"g-4\">\n        {graveyard.map((card, index) =>\n          <CardComponent key={index} card={card}/>\n        )}\n      </Row>\n    </>)\n}\n","import React, { useState } from 'react'\nimport { Button, Col, Container, Dropdown, DropdownButton, ListGroup, Offcanvas, Row } from 'react-bootstrap'\nimport { useAppDispatch, useAppSelector } from '../../app/hooks'\n\nimport {\n  addDeckToLibrary,\n  getFullDeck,\n  importDeckFromUrlToLibrary,\n  PlaygroundState,\n  selectPlayground,\n} from '../../features/playground/reducer'\nimport { Cards } from '../../shared/types'\nimport { PlaygroundTools } from './PlaygroundTools'\nimport { Library } from './Library'\nimport { Hand } from './Hand'\nimport { Graveyard } from './Graveyard'\n\nconst tarotDeck = [\n  {\n    name: 'Le Fou',\n    content: 'Le Fou est une des seules cartes sans numéro dans la plupart des variantes du tarot de Marseille'\n  },\n  {\n    name: 'Le Bateleur',\n    content: 'Le Bateleur est la première carte du tarot de Marseille. Elle suit peut-être la carte sans numéro Le Mat. Sa lame figure un jeune homme coiffé d\\'un large chapeau (en forme de lemniscat) se tenant debout devant une table sur laquelle sont disposés différents objets pour réaliser des tours de passe passe.'\n  },\n  {\n    name: 'La Papesse',\n    content: 'La Papesse est la deuxième carte du tarot de Marseille.'\n  },\n  {\n    name: 'L\\'Impératrice',\n    content: 'L\\'Impératrice est la troisième carte du tarot de Marseille.'\n  },\n  {\n    name: 'L\\'Empereur ',\n    content: 'L\\'Empereur est le 4e arcane des 22 arcanes majeurs du tarot de Marseille.'\n  }\n]\n\nconst socialEncountersURL = 'https://raw.githubusercontent.com/de-dale/spherier/master/data/social-encounter.json'\n\nexport function Playground() {\n  const playground = useAppSelector(selectPlayground)\n\n  const dispatch = useAppDispatch()\n  const fullDeck = getFullDeck(playground)\n\n  return (\n    <>\n      <h1>Playground</h1>\n      <Container fluid>\n        <Row>\n          <Col>\n            <PlaygroundTools/>\n            <FullDeck deck={fullDeck}/>\n          </Col>\n          <Col md={2}>\n            <DropdownButton title=\"Decks d'exemple\">\n              <Dropdown.Item onClick={() => dispatch(addDeckToLibrary(tarotDeck))}>Jeu de Tarot</Dropdown.Item>\n              <Dropdown.Item onClick={() => dispatch(importDeckFromUrlToLibrary(socialEncountersURL))}>Sphérier - Rencontres Sociales</Dropdown.Item>\n            </DropdownButton>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <InnerPlayground playground={playground}/>\n          </Col>\n        </Row>\n      </Container>\n    </>\n  )\n}\n\n\ntype DeckProps = {\n  deck: Cards,\n}\n\nfunction FullDeck({ deck }: DeckProps) {\n  const [show, setShow] = useState(false)\n\n  const handleClose = () => setShow(false)\n  const handleShow = () => setShow(true)\n\n  return (\n    <>\n      <Button variant=\"primary\" onClick={handleShow}>\n        {show ? 'Masquer le Deck' : 'Montrer le deck'}\n      </Button>\n\n      <Offcanvas show={show} onHide={handleClose} placement={'end'}>\n        <Offcanvas.Header closeButton>\n          <Offcanvas.Title>Deck Complet : {deck.length}</Offcanvas.Title>\n        </Offcanvas.Header>\n        <Offcanvas.Body>\n          <ListGroup>\n            {deck.map((card, index) =>\n              <ListGroup.Item key={index}>\n                <strong>{card.name}</strong>\n                <div>{card.content}</div>\n              </ListGroup.Item>\n            )}\n          </ListGroup>\n        </Offcanvas.Body>\n      </Offcanvas>\n    </>\n  )\n}\n\ntype InnerPlaygroundProps = {\n  playground: PlaygroundState,\n}\n\nfunction InnerPlayground({ playground }: InnerPlaygroundProps) {\n  return (\n    <>\n      <Row>\n        <Col md={3}>\n          <Library library={playground.library}/>\n        </Col>\n        <Col md={6}>\n          <Hand hand={playground.hand}/>\n        </Col>\n        <Col md={3}>\n          <Graveyard graveyard={playground.graveyard}/>\n        </Col>\n      </Row>\n    </>\n  )\n\n}\n\n\n\n\n\n\n","import React from 'react'\nimport { Playground } from './components/playground/Playground'\nimport './App.css'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Playground/>\n    </div>\n  )\n}\n\nexport default App\n","import { Action, configureStore, ThunkAction } from '@reduxjs/toolkit'\nimport playgroundReducer from '../features/playground/reducer'\n\nexport const store = configureStore({\n  reducer: {\n    playground: playgroundReducer,\n  },\n})\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType,\n  RootState,\n  unknown,\n  Action<string>>;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './index.css'\nimport App from './App'\nimport { store } from './app/store'\nimport { Provider } from 'react-redux'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App/>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}