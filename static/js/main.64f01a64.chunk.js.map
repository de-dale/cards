{"version":3,"sources":["app/hooks.ts","components/playground/loadDeckAPI.ts","components/playground/reducer.ts","components/playground/Playground.tsx","App.tsx","app/store.ts","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","fetchDeck","cards","Promise","resolve","setTimeout","data","mockedDeck","name","content","loadLibrary","createAsyncThunk","arg","thunkAPI","a","response","dispatch","addDeckToLibrary","playgroundSlice","createSlice","initialState","library","hand","battlefield","graveyard","stack","exile","command","status","reducers","draw","playground","length","cardToDraw","remainingLibrary","push","action","concat","payload","addCardToLibrary","discardAll","discardByIndex","cardToDiscard","splice","putBelowLibrary","shuffleLibrary","array","i","j","Math","floor","random","shuffleArray","extraReducers","builder","addCase","pending","fulfilled","actions","selectPlayground","state","tarotDeck","Playground","fullDeck","getFullDeck","Container","fluid","Row","Col","Tools","FullDeck","deck","md","DropdownButton","title","Dropdown","Item","onClick","InnerPlayground","useState","show","setShow","handleClose","Button","variant","className","Offcanvas","onHide","Header","closeButton","Title","Body","CreateCardForm","close","validated","setValidated","end","setEnd","Form","noValidate","onSubmit","e","event","form","currentTarget","preventDefault","checkValidity","value","stopPropagation","handleSubmit","Label","Control","id","required","type","placeholder","Feedback","as","rows","style","height","placement","ListGroup","map","card","index","LibraryComponent","HandComponent","GraveyardComponent","ButtonToolbar","size","xs","CardComponent","hidden","revealable","label","Card","width","Footer","overflow","Text","App","store","configureStore","reducer","playgroundReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.64f01a64.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { Cards } from '../../shared/types'\n\n// A mock function to mimic making an async request for data\nexport function fetchDeck(cards: Cards) {\n  return new Promise<{ data: Cards }>((resolve) =>\n    setTimeout(() => resolve({ data: cards }), 500)\n  )\n}\n","import { createAsyncThunk, createSlice, Draft, PayloadAction } from '@reduxjs/toolkit'\nimport { RootState } from '../../app/store'\nimport { fetchDeck } from './loadDeckAPI'\nimport { Card, Cards } from '../../shared/types'\n\nexport interface PlaygroundState {\n  library: Cards;\n  hand: Cards;\n  battlefield: Cards;\n  graveyard: Cards;\n  stack: Cards;\n  exile: Cards;\n  command: Cards;\n  status: 'idle' | 'loading' | 'failed';\n}\n\nconst mockedDeck = [{\n  name: 'S\\'enquiérir',\n  content: 'Permet de s\\'intéresser à son interlocuteur'\n},\n  {\n    name: 'Rassurer',\n    content: 'Permet de rassurer l\\'interlocuteur'\n  },\n  {\n    name: 'Complimenter',\n    content: 'Si votre ramage ressemble à votre plumage'\n  }\n]\n\nconst initialState: PlaygroundState = {\n  library: [] as Cards,\n  hand: [] as Cards,\n  battlefield: [] as Cards,\n  graveyard: [] as Cards,\n  stack: [] as Cards,\n  exile: [] as Cards,\n  command: [] as Cards,\n  status: 'idle',\n}\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const loadLibrary = createAsyncThunk(\n  'playground/loadLibrary',\n  async (arg, thunkAPI) => {\n    const response = await fetchDeck(mockedDeck)\n    thunkAPI.dispatch(addDeckToLibrary(response.data))\n  }\n)\n\nconst shuffleArray = (array: Array<any>) => {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]]\n  }\n}\n\nexport const playgroundSlice = createSlice({\n  name: 'playground',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    draw: (playground: Draft<PlaygroundState>) => {\n      if (playground.library.length === 0) {\n        return\n      }\n      const [cardToDraw, ...remainingLibrary] = playground.library\n      playground.hand.push(cardToDraw)\n      playground.library = remainingLibrary\n    },\n    addDeckToLibrary: (playground: Draft<PlaygroundState>, action: PayloadAction<Cards>) => {\n      playground.library = playground.library.concat(action.payload)\n    },\n    addCardToLibrary: (playground: Draft<PlaygroundState>, action: PayloadAction<Card>) => {\n      playground.library.push(action.payload)\n    },\n    discardAll: (playground: Draft<PlaygroundState>) => {\n      playground.graveyard = playground.graveyard.concat(playground.hand)\n      playground.hand = []\n    },\n    discardByIndex: (playground: Draft<PlaygroundState>, action: PayloadAction<number>) => {\n      const cardToDiscard: Cards = playground.hand.splice(action.payload, 1)\n      playground.graveyard = playground.graveyard.concat(cardToDiscard)\n    },\n    putBelowLibrary: (playground: Draft<PlaygroundState>) => {\n      playground.library = playground.library.concat(playground.graveyard)\n      playground.graveyard = []\n    },\n    shuffleLibrary: (playground: Draft<PlaygroundState>) => {\n      shuffleArray(playground.library)\n    }\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(loadLibrary.pending, (playground) => {\n        playground.status = 'loading'\n      })\n      .addCase(loadLibrary.fulfilled, (playground, action) => {\n        playground.status = 'idle'\n      })\n  },\n})\n\nexport const getFullDeck = (playground: PlaygroundState) => playground.library\n    .concat(playground.hand)\n    .concat(playground.battlefield)\n    .concat(playground.graveyard)\n    .concat(playground.stack)\n    .concat(playground.exile)\n    .concat(playground.command)\n\nexport const {\n  addCardToLibrary,\n  addDeckToLibrary,\n  discardAll,\n  discardByIndex,\n  draw,\n  putBelowLibrary,\n  shuffleLibrary\n} = playgroundSlice.actions\n\nexport const selectPlayground = (state: RootState) => state.playground\n\nexport default playgroundSlice.reducer\n","import React, { FormEvent, useState } from 'react'\nimport {\n  Button,\n  ButtonToolbar,\n  Card,\n  Col,\n  Container,\n  DropdownButton,\n  Form,\n  ListGroup,\n  Offcanvas,\n  Row\n} from 'react-bootstrap'\nimport { useAppDispatch, useAppSelector } from '../../app/hooks'\n\nimport {\n  addCardToLibrary, addDeckToLibrary,\n  discardAll,\n  discardByIndex,\n  draw,\n  getFullDeck,\n  PlaygroundState,\n  putBelowLibrary,\n  selectPlayground,\n  shuffleLibrary,\n} from './reducer'\nimport { Card as CardModel, Cards } from '../../shared/types'\nimport { Dropdown } from 'react-bootstrap'\n\nconst tarotDeck = [\n  {\n    name: 'Le Fou',\n    content: 'Le Fou est une des seules cartes sans numéro dans la plupart des variantes du tarot de Marseille'\n  },\n  {\n    name: 'Le Bateleur',\n    content: 'Le Bateleur est la première carte du tarot de Marseille. Elle suit peut-être la carte sans numéro Le Mat. Sa lame figure un jeune homme coiffé d\\'un large chapeau (en forme de lemniscat) se tenant debout devant une table sur laquelle sont disposés différents objets pour réaliser des tours de passe passe.'\n  },\n  {\n    name: 'La Papesse',\n    content: 'La Papesse est la deuxième carte du tarot de Marseille.'\n  },\n  {\n    name: 'L\\'Impératrice',\n    content: 'L\\'Impératrice est la troisième carte du tarot de Marseille.'\n  },\n  {\n    name: 'L\\'Empereur ',\n    content: 'L\\'Empereur est le 4e arcane des 22 arcanes majeurs du tarot de Marseille.'\n  }\n]\n\nexport function Playground() {\n  const playground = useAppSelector(selectPlayground)\n\n  const dispatch = useAppDispatch()\n  const fullDeck = getFullDeck(playground)\n\n  return (\n    <>\n      <h1>Playground</h1>\n      <Container fluid>\n        <Row>\n          <Col>\n            <Tools/>\n            <FullDeck deck={fullDeck}/>\n          </Col>\n          <Col md={2}>\n            <DropdownButton title=\"Decks d'exemple\">\n              <Dropdown.Item onClick={() => dispatch(addDeckToLibrary(tarotDeck))}>Jeu de Tarot</Dropdown.Item>\n            </DropdownButton>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <InnerPlayground playground={playground}/>\n          </Col>\n        </Row>\n      </Container>\n    </>\n  )\n}\n\nfunction Tools() {\n  const [show, setShow] = useState(false)\n\n  const handleClose = () => setShow(false)\n  const handleShow = () => setShow(true)\n\n  return (\n    <>\n      <Button variant=\"primary\" className=\"me-2\" onClick={handleShow}>\n        Outils\n      </Button>\n\n      <Offcanvas show={show} onHide={handleClose}>\n        <Offcanvas.Header closeButton>\n          <Offcanvas.Title>Outils</Offcanvas.Title>\n        </Offcanvas.Header>\n        <Offcanvas.Body>\n          <CreateCardForm close={() => handleClose()}/>\n        </Offcanvas.Body>\n      </Offcanvas>\n    </>\n  )\n}\n\ntype CardFormProps = {\n  close: Function\n}\n\nfunction CreateCardForm({ close }: CardFormProps) {\n  const [validated, setValidated] = useState(false)\n  const [end, setEnd] = useState(false)\n  const dispatch = useAppDispatch()\n\n  const handleSubmit = (event: FormEvent<HTMLFormElement>) => {\n    const form = event.currentTarget\n    event.preventDefault()\n    if (!form.checkValidity()) {\n      event.stopPropagation()\n    } else {\n      dispatch(addCardToLibrary({\n        name: form['cardName'].value,\n        content: form['cardContent'].value,\n      }))\n      end && close()\n    }\n    setEnd(false)\n    setValidated(true)\n  }\n\n  return (\n    <Form noValidate validated={validated} onSubmit={(e) => handleSubmit(e)}>\n      <Form.Label>Créer une carte</Form.Label>\n      <Form.Control\n        id=\"cardName\"\n        required\n        type=\"text\"\n        placeholder=\"Nom de la carte\"/>\n      <Form.Control.Feedback type=\"invalid\">Une carte doit avoir un nom</Form.Control.Feedback>\n      <Form.Control as=\"textarea\" rows={3} className=\"mt-1\"\n                    id=\"cardContent\"\n                    required\n                    style={{ height: '100px' }}\n                    placeholder=\"Effets de la carte\"/>\n      <Form.Control.Feedback type=\"invalid\">Une carte doit avoir des effets</Form.Control.Feedback>\n      <Button type=\"submit\" className=\"mt-3 me-2\">Créer</Button>\n      <Button type=\"submit\" className=\"mt-3\" onClick={() => setEnd(true)}>Créer et fermer</Button>\n    </Form>\n  )\n}\n\ntype DeckProps = {\n  deck: Cards,\n}\n\nfunction FullDeck({ deck }: DeckProps) {\n  const [show, setShow] = useState(false)\n\n  const handleClose = () => setShow(false)\n  const handleShow = () => setShow(true)\n\n  return (\n    <>\n      <Button variant=\"primary\" onClick={handleShow}>\n        {show ? 'Masquer le Deck' : 'Montrer le deck'}\n      </Button>\n\n      <Offcanvas show={show} onHide={handleClose} placement={'end'}>\n        <Offcanvas.Header closeButton>\n          <Offcanvas.Title>Deck Complet : {deck.length}</Offcanvas.Title>\n        </Offcanvas.Header>\n        <Offcanvas.Body>\n          <ListGroup>\n            {deck.map((card, index) =>\n              <ListGroup.Item key={index}>\n                <strong>{card.name}</strong>\n                <div>{card.content}</div>\n              </ListGroup.Item>\n            )}\n          </ListGroup>\n        </Offcanvas.Body>\n      </Offcanvas>\n    </>\n  )\n}\n\ntype InnerPlaygroundProps = {\n  playground: PlaygroundState,\n}\n\nfunction InnerPlayground({ playground }: InnerPlaygroundProps) {\n  return (\n    <>\n      <Row>\n        <Col md={3}>\n          <LibraryComponent library={playground.library}/>\n        </Col>\n        <Col md={6}>\n          <HandComponent hand={playground.hand}/>\n        </Col>\n        <Col md={3}>\n          <GraveyardComponent graveyard={playground.graveyard}/>\n        </Col>\n      </Row>\n    </>\n  )\n\n}\n\ntype LibraryProps = {\n  library: Cards,\n}\n\nfunction LibraryComponent({ library }: LibraryProps) {\n  const dispatch = useAppDispatch()\n  return (\n    <>\n      <h2>Pioche : {library.length}</h2>\n      <ButtonToolbar>\n        <Button size=\"sm\" className=\"me-2\"\n                onClick={() => dispatch(draw())}\n                aria-label=\"Pioche\">\n          Pioche\n        </Button>\n        <Button size=\"sm\" variant=\"primary\"\n                onClick={() => dispatch(shuffleLibrary())}\n                aria-label=\"Mélanger\">\n          Mélanger\n        </Button>\n      </ButtonToolbar>\n      <Row xs={1} md={1} className=\"g-4\">\n        {library.map((card, index) =>\n          <CardComponent key={index}\n                         card={card}\n                         hidden\n                         revealable/>\n        )}\n      </Row>\n    </>)\n}\n\n\ntype HandProps = {\n  hand: Cards,\n}\n\nfunction HandComponent({ hand }: HandProps) {\n  const dispatch = useAppDispatch()\n  return (\n    <>\n      <h2>La Main : {hand.length}</h2>\n      <ButtonToolbar>\n        <Button size=\"sm\" variant=\"primary\"\n                onClick={() => dispatch(discardAll())}\n                aria-label=\"Défausser la main\">\n          Défausser la main\n        </Button>\n      </ButtonToolbar>\n      <Row xs={1} md={3} className=\"g-4\">\n        {hand.map((card, index) =>\n          <CardComponent key={index} card={card} actions={[\n            {\n              label: 'Défausser',\n              action: () => dispatch(discardByIndex(index))\n            }\n          ]}/>\n        )}\n      </Row>\n    </>)\n}\n\ntype GraveyardProps = {\n  graveyard: Cards,\n}\n\nfunction GraveyardComponent({ graveyard }: GraveyardProps) {\n  const dispatch = useAppDispatch()\n  return (\n    <>\n      <h2>La Défausse : {graveyard.length}</h2>\n      <ButtonToolbar>\n        <Button size=\"sm\"\n                onClick={() => dispatch(putBelowLibrary())}\n                aria-label=\"Remettre sous la pioche\">\n          Remettre sous la pioche\n        </Button>\n      </ButtonToolbar>\n      <Row xs={1} md={1} className=\"g-4\">\n        {graveyard.map((card, index) =>\n          <CardComponent key={index} card={card}/>\n        )}\n      </Row>\n    </>)\n}\n\ntype CardAction = {\n  label: string,\n  action: Function,\n}\n\ntype CardProps = {\n  card: CardModel,\n  actions?: Array<CardAction>,\n  hidden?: boolean,\n  revealable?: boolean\n}\n\nfunction CardComponent({ card, actions = [], hidden = false, revealable = false }: CardProps) {\n  const [show, setShow] = useState(!hidden)\n  return (\n    <>\n      <Col>\n        {!show && <Card style={{ width: '18rem', height: '12rem' }}>\n          <Card.Header as=\"h5\"> *** </Card.Header>\n          <Card.Body> *** </Card.Body>\n          <Card.Footer>\n            {revealable && <Button size=\"sm\" variant=\"secondary\"\n                                   onClick={() => setShow(!show)}\n                                   aria-label=\"Révéler\">\n              Révéler\n            </Button>}\n          </Card.Footer>\n        </Card>}\n        {show && <Card style={{ width: '18rem', height: '12rem' }}>\n          <Card.Header as=\"h5\">{card.name}</Card.Header>\n          <Card.Body style={{ overflow: 'auto' }}>\n            <Card.Text>{card.content}</Card.Text>\n          </Card.Body>\n          {(0 < actions.length || revealable) && <Card.Footer>\n            {actions.map((action, index) =>\n              <Button size=\"sm\" key={index}\n                      onClick={() => action.action()}\n                      aria-label={action.label}>\n                {action.label}\n              </Button>\n            )}\n            {revealable && <Button size=\"sm\" variant=\"secondary\"\n                                   onClick={() => setShow(!show)}\n                                   aria-label=\"Masquer\">\n              Masquer\n            </Button>}\n          </Card.Footer>}\n        </Card>}\n      </Col>\n    </>)\n}","import React from 'react'\nimport { Playground } from './components/playground/Playground'\nimport './App.css'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Playground/>\n    </div>\n  )\n}\n\nexport default App\n","import { Action, configureStore, ThunkAction } from '@reduxjs/toolkit'\nimport playgroundReducer from '../components/playground/reducer'\n\nexport const store = configureStore({\n  reducer: {\n    playground: playgroundReducer,\n  },\n})\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType,\n  RootState,\n  unknown,\n  Action<string>>;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './index.css'\nimport App from './App'\nimport { store } from './app/store'\nimport { Provider } from 'react-redux'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App/>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}